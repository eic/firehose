on: 
  schedule:
    - cron:  '0 0 * * *'
  workflow_dispatch:
  pull_request:

env:
  TIME: "1 day"
  ROOT: "/work/eic2/EPIC/RECO"
  XROOTD_HOST: root://dtn-eic.jlab.org

jobs:
  campaigns:
    runs-on: ubuntu-latest
    outputs:
      campaigns: ${{steps.campaigns.outputs.campaigns}}
    container:
      image: rucio/xrootd
    steps:
    - name: List campaigns
      id: campaigns
      shell: bash
      run: |
        campaigns=$(xrdfs ${XROOTD_HOST} ls ${ROOT} | awk -F'/' '{print $NF}' | sort -n)
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
        echo "campaigns<<END" >> $GITHUB_OUTPUT
        echo "$campaigns" >> $GITHUB_OUTPUT
        echo "END" >> $GITHUB_OUTPUT
    - name: Print outputs
      id: outputs
      run: |
        echo "${{steps.campaigns.outputs.campaigns}}"

  last_campaign:
    runs-on: ubuntu-latest
    needs:
    - campaigns
    if: ${{needs.campaigns.outputs.campaigns != ''}}
    env:
      CAMPAIGNS: ${{needs.campaigns.outputs.campaigns}}
    outputs:
      last_campaign: ${{steps.last_campaign.outputs.last_campaign}}
    steps:
    - name: Print inputs
      id: inputs
      run: |
        echo "$CAMPAIGNS"
    - name: Determine last campaign
      id: last_campaign
      shell: bash
      run: |
        last_campaign=$(echo "$CAMPAIGNS" | grep -v 'alternative' | grep -v 'main' | tail -n 1 | sed 's/.*[ ]\(.*\)$/\1/')
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
        echo "last_campaign<<END" >> $GITHUB_OUTPUT
        echo "$last_campaign" >> $GITHUB_OUTPUT
        echo "END" >> $GITHUB_OUTPUT
    - name: Print outputs
      id: outputs
      run: |
        echo "${{steps.last_campaign.outputs.last_campaign}}"

  counts:
    runs-on: ubuntu-latest
    needs:
    - last_campaign
    if: ${{needs.last_campaign.outputs.last_campaign != ''}}
    env:
      LAST_CAMPAIGN: ${{needs.last_campaign.outputs.last_campaign}}
    outputs:
      counts: ${{steps.counts.outputs.counts}}
    container:
      image: rucio/xrootd
    steps:
    - name: Print inputs
      id: inputs
      run: |
        echo "$LAST_CAMPAIGN"
    - name: Determine file counts
      id: counts
      shell: bash
      run: |
        # Get the current date and the date 1 day ago
        current_date=$(date +%s)
        one_day_ago=$(date -d "${TIME} ago" +%s)

        # List all files with details
        xrdfs $XROOTD_HOST ls -l -R $ROOT | while read -r perm user group size date time file; do
          # Convert file date to seconds since epoch
          file_date_seconds=$(date -d "$date $time" +%s)
          # Check if the file was created within the last 1 day
          if [ $file_date_seconds -ge $one_day_ago ]; then
            # keep only the RECO/.../ path up to parent of directory with files
            if [[ $file =~ ${ROOT}/[^/]*/[^/]* ]] ; then
              echo ${BASH_REMATCH[1]}
            fi
          fi
        done > files-stripped.txt
        
        # sort files, count, sort by count (key 1)
        cat files-stripped.txt | sort | uniq --count | tee -a counts.txt
        # take highest 10, sort by path (key 2)
        cat counts.txt | sort -k1 -n | tail -n10 | sort -k2 | tee -a counts-stripped.txt
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
        echo "counts<<END" >> $GITHUB_OUTPUT
        cat counts-stripped.txt >> $GITHUB_OUTPUT
        echo "END" >> $GITHUB_OUTPUT
    - name: Print outputs
      id: outputs
      run: |
        echo "${{steps.counts.outputs.counts}}"

  post:
    runs-on: ubuntu-latest
    needs:
    - counts
    if: ${{needs.counts.outputs.counts != ''}}
    env:
      COUNTS: ${{needs.counts.outputs.counts}}
    outputs:
      json: ${{steps.json.outputs.json}}
    steps:
    - uses: actions/checkout@v4
    - name: Print inputs
      id: inputs
      run: |
        echo "$COUNTS"
    - name: Create json
      id: json
      run: |
        cat daily.md | envsubst > daily-envsubst.md
        echo "{\"text\":\"$(<daily-envsubst.md)\"}" | tee data.json
      env:
        MATTERMOST_HOOK_URL: https://chat.epic-eic.org/hooks
        MATTERMOST_HOOK_SECRET: ${{secrets.MATTERMOST_HOOK_SECRET}}
    - name: Post to Mattermost
      if: ${{github.event_name != 'pull_request'}}
      id: post
      run: |
        if [ -n "$COUNTS" ] ; then
          curl -X POST -H 'Content-type: application/json' --data "@data.json" ${MATTERMOST_HOOK_URL}/${MATTERMOST_HOOK_SECRET}
        fi
    - name: Print outputs
      id: outputs
      run: |
        cat data.json
